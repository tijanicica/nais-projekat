version: '3.8'

services:
  eureka-server:
    build:
      context: ./eureka-service
      dockerfile: Dockerfile
    image: eureka-server:latest
    ports:
      - "8761:8761"

  gateway-api:
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    image: gateway-api:latest
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
    depends_on:
      - eureka-server
      - history-service
      - recommendation-service
      - search-service
      - analytics-service
    ports:
      - "9003:9000"

  history-service:
    build:
      context: ./history-service
      dockerfile: Dockerfile
    image: history-service:latest
    depends_on:
      - cassandradb
      - eureka-server
    restart: always
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
      SPRING_DATA_CASSANDRA_CONTACT_POINTS: cassandradb
      SPRING_DATA_CASSANDRA_PORT: 9042
      REDIS_HOST: redisdb
      REDIS_PORT: 6379
    ports:
      - "9050:9050"

  cassandradb:
    image: cassandra:latest
    ports:
      - "9042:9042"
    volumes:
      - data:/var/lib/cassandra
    healthcheck:
      test: [ "CMD-SHELL", "[ $$(nodetool statusgossip) = running ]" ]
      interval: 30s
      timeout: 10s

  recommendation-service:
    build:
      context: ./recommendation-service
      dockerfile: Dockerfile
    image: recommendation-service:latest
    depends_on:
      - eureka-server
      - neo4j
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
      SPRING_NEO4J_URI: "bolt://neo4j:7687"
      SPRING_NEO4J_USERNAME: neo4j
      SPRING_NEO4J_PASSWORD: password

  analytics-service:
    build:
      context: ./analytics-service
      dockerfile: Dockerfile
    image: analytics-service:latest
    restart: on-failure
    depends_on:
      - eureka-server
      - influxdb
    environment:
      SPRING_INFLUX_URL: http://influxdb:8086
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka

  influxdb:
    image: influxdb:2.7.6
    ports:
      - '8086:8086'
    volumes:
      - influxdb-storage:/var/lib/influxdb
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=nais
      - DOCKER_INFLUXDB_INIT_PASSWORD=password
      - DOCKER_INFLUXDB_INIT_ORG=nais_org
      - DOCKER_INFLUXDB_INIT_BUCKET=nais_bucket
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=my-super-secret-auth-token

  neo4j:
    image: neo4j
    container_name: neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      NEO4J_AUTH: neo4j/password
    volumes:
      - ./data:/data

  weaviate:
    command:
      - --host
      - 0.0.0.0
      - --port
      - '8080'
      - --scheme
      - http
    image: semitechnologies/weaviate:1.22.4
    ports:
      - "8080:8080"
    restart: on-failure:0
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'text2vec-openai'
      ENABLE_MODULES: 'text2vec-openai'
      OPENAI_APIKEY: ${OPENAI_API_KEY} # Dodajte u .env fajl
    volumes:
      - weaviate_data:/var/lib/weaviate
    healthcheck:
      test: [ "CMD-SHELL", "wget -q --spider --timeout=10 http://localhost:8080/v1/.well-known/ready || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5

  search-service:
    build: ./search-service
    ports:
      - "8095:8095"
    depends_on:
      weaviate:
        condition: service_healthy
      eureka-server:
        condition: service_started
    environment:
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    restart: on-failure

volumes:
  data:
  influxdb-storage:
  weaviate_data: {}
